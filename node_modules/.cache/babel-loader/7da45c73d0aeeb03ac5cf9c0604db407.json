{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/dishasingh/hulu-clone/src/Results.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from \"react\";\nimport \"./Results.css\";\nimport VideoCard from \"./VideoCard\";\nimport axios from \"./axios\";\nimport FlipMove from \"react-flip-move\";\nimport YouTube from \"react-youtube\";\n\nfunction Results({\n  selectedOption\n}) {\n  _s();\n\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(selectedOption);\n      setMovies(request.data.results);\n      return request;\n    }\n\n    fetchData();\n  }, [selectedOption]);\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1\n    }\n  };\n  const handleClick = mivie;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"results\",\n    children: [/*#__PURE__*/_jsxDEV(FlipMove, {\n      children: movies.map(movie => /*#__PURE__*/_jsxDEV(VideoCard, {\n        movie: movie\n      }, movie.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Results, \"k63ruaDr6ck94JTzLN3dN+sD/HM=\");\n\n_c = Results;\nexport default Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/dishasingh/hulu-clone/src/Results.js"],"names":["React","useEffect","useState","VideoCard","axios","FlipMove","YouTube","Results","selectedOption","movies","setMovies","trailerUrl","setTrailerUrl","fetchData","request","get","data","results","opts","height","width","playerVars","autoplay","handleClick","mivie","map","movie","id"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAO,eAAP;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AACA,OAAOC,OAAP,MAAoB,eAApB;;AAEA,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAAqC;AAAA;;AACnC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBR,QAAQ,CAAC,EAAD,CAApC;AACA,QAAM,CAACS,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC,EAAD,CAA5C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACd,mBAAeY,SAAf,GAA2B;AACzB,YAAMC,OAAO,GAAG,MAAMV,KAAK,CAACW,GAAN,CAAUP,cAAV,CAAtB;AACAE,MAAAA,SAAS,CAACI,OAAO,CAACE,IAAR,CAAaC,OAAd,CAAT;AACA,aAAOH,OAAP;AACD;;AACDD,IAAAA,SAAS;AACV,GAPQ,EAON,CAACL,cAAD,CAPM,CAAT;AASA,QAAMU,IAAI,GAAG;AACXC,IAAAA,MAAM,EAAE,KADG;AAEXC,IAAAA,KAAK,EAAE,MAFI;AAGXC,IAAAA,UAAU,EAAE;AACVC,MAAAA,QAAQ,EAAE;AADA;AAHD,GAAb;AAQA,QAAMC,WAAW,GAAIC,KAArB;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,4BACE,QAAC,QAAD;AAAA,gBACGf,MAAM,CAACgB,GAAP,CAAYC,KAAD,iBACV,QAAC,SAAD;AAA0B,QAAA,KAAK,EAAEA;AAAjC,SAAgBA,KAAK,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF,EAMGhB,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEO;AAApC;AAAA;AAAA;AAAA;AAAA,YANjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GAjCQX,O;;KAAAA,O;AAmCT,eAAeA,OAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./Results.css\";\nimport VideoCard from \"./VideoCard\";\nimport axios from \"./axios\";\nimport FlipMove from \"react-flip-move\";\nimport YouTube from \"react-youtube\";\n\nfunction Results({ selectedOption }) {\n  const [movies, setMovies] = useState([]);\n  const [trailerUrl, setTrailerUrl] = useState(\"\");\n\n  useEffect(() => {\n    async function fetchData() {\n      const request = await axios.get(selectedOption);\n      setMovies(request.data.results);\n      return request;\n    }\n    fetchData();\n  }, [selectedOption]);\n\n  const opts = {\n    height: \"390\",\n    width: \"100%\",\n    playerVars: {\n      autoplay: 1,\n    },\n  };\n\n  const handleClick = (mivie)\n\n  return (\n    <div className=\"results\">\n      <FlipMove>\n        {movies.map((movie) => (\n          <VideoCard key={movie.id} movie={movie} />\n        ))}\n      </FlipMove>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n}\n\nexport default Results;\n"]},"metadata":{},"sourceType":"module"}