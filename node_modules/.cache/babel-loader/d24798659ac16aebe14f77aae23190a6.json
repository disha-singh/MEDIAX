{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/dishasingh/hulu-clone/src/VideoCard.js\";\nimport React, { forwardRef } from \"react\";\nimport \"./VideoCard.css\";\nimport TextTruncate from \"react-text-truncate\";\nimport { ThumbUpSharp } from \"@material-ui/icons\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\nconst VideoCard = /*#__PURE__*/forwardRef(_c = ({\n  movie\n}, ref) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    className: \"videoCard\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: `${base_url}${movie.backdrop_path || movie.poster_path}`,\n      alt: \"movie poster\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [movie.title || movie.original_name, \" \\u2022\", \" \", movie.release_date || movie.first_air_date]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextTruncate, {\n      line: 2,\n      element: \"p\",\n      truncateText: \"...\",\n      text: movie.overview\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"videoCard_stats\",\n      children: [movie.media_type && `${movie.media_type} •`, \" \", /*#__PURE__*/_jsxDEV(ThumbUpSharp, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 55\n      }, this), \" \", movie.vote_count]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this), trailerUrl && /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: trailerUrl,\n      opts: opts\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 22\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 12,\n    columnNumber: 5\n  }, this);\n});\n_c2 = VideoCard;\nexport default VideoCard;\n\nconst handleClick = movie => {\n  if (trailerUrl) {\n    setTrailerUrl(\"\");\n  } else {\n    movieTrailer((movie === null || movie === void 0 ? void 0 : movie.name) || \"\").then(url => {\n      const urlParams = new URLSearchParams(URL(url).search);\n      setTrailerUrl(urlParams.get(\"v\"));\n    }).catch(error => console.log(error));\n  }\n};\n\nconst opts = {\n  height: \"390\",\n  width: \"100%\",\n  playerVars: {\n    autoplay: 1\n  }\n};\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"VideoCard$forwardRef\");\n$RefreshReg$(_c2, \"VideoCard\");","map":{"version":3,"sources":["/Users/dishasingh/hulu-clone/src/VideoCard.js"],"names":["React","forwardRef","TextTruncate","ThumbUpSharp","YouTube","movieTrailer","base_url","VideoCard","movie","ref","backdrop_path","poster_path","title","original_name","release_date","first_air_date","overview","media_type","vote_count","trailerUrl","opts","handleClick","setTrailerUrl","name","then","url","urlParams","URLSearchParams","URL","search","get","catch","error","console","log","height","width","playerVars","autoplay"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,QAAkC,OAAlC;AACA,OAAO,iBAAP;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,SAASC,YAAT,QAA6B,oBAA7B;AACA,OAAOC,OAAP,MAAoB,eAApB;AACA,OAAOC,YAAP,MAAyB,eAAzB;AAEA,MAAMC,QAAQ,GAAG,sCAAjB;AAEA,MAAMC,SAAS,gBAAGN,UAAU,MAAC,CAAC;AAAEO,EAAAA;AAAF,CAAD,EAAYC,GAAZ,KAAoB;AAC/C,sBACE;AAAK,IAAA,GAAG,EAAEA,GAAV;AAAe,IAAA,SAAS,EAAC,WAAzB;AAAA,4BACE;AAEE,MAAA,GAAG,EAAG,GAAEH,QAAS,GAAEE,KAAK,CAACE,aAAN,IAAuBF,KAAK,CAACG,WAAY,EAF9D;AAGE,MAAA,GAAG,EAAC;AAHN;AAAA;AAAA;AAAA;AAAA,YADF,eAME;AAAA,iBACGH,KAAK,CAACI,KAAN,IAAeJ,KAAK,CAACK,aADxB,aACyC,GADzC,EAEGL,KAAK,CAACM,YAAN,IAAsBN,KAAK,CAACO,cAF/B;AAAA;AAAA;AAAA;AAAA;AAAA,YANF,eAUE,QAAC,YAAD;AACE,MAAA,IAAI,EAAE,CADR;AAEE,MAAA,OAAO,EAAC,GAFV;AAGE,MAAA,YAAY,EAAC,KAHf;AAIE,MAAA,IAAI,EAAEP,KAAK,CAACQ;AAJd;AAAA;AAAA;AAAA;AAAA,YAVF,eAgBE;AAAG,MAAA,SAAS,EAAC,iBAAb;AAAA,iBACGR,KAAK,CAACS,UAAN,IAAqB,GAAET,KAAK,CAACS,UAAW,IAD3C,oBACgD,QAAC,YAAD;AAAA;AAAA;AAAA;AAAA,cADhD,EACiE,GADjE,EAEGT,KAAK,CAACU,UAFT;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF,EAoBGC,UAAU,iBAAI,QAAC,OAAD;AAAS,MAAA,OAAO,EAAEA,UAAlB;AAA8B,MAAA,IAAI,EAAEC;AAApC;AAAA;AAAA;AAAA;AAAA,YApBjB;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwBD,CAzB2B,CAA5B;MAAMb,S;AA2BN,eAAeA,SAAf;;AAKA,MAAMc,WAAW,GAAIb,KAAD,IAAW;AAC7B,MAAIW,UAAJ,EAAgB;AACdG,IAAAA,aAAa,CAAC,EAAD,CAAb;AACD,GAFD,MAEO;AACLjB,IAAAA,YAAY,CAAC,CAAAG,KAAK,SAAL,IAAAA,KAAK,WAAL,YAAAA,KAAK,CAAEe,IAAP,KAAe,EAAhB,CAAZ,CACGC,IADH,CACSC,GAAD,IAAS;AACb,YAAMC,SAAS,GAAG,IAAIC,eAAJ,CAAoBC,GAAG,CAACH,GAAD,CAAH,CAASI,MAA7B,CAAlB;AACAP,MAAAA,aAAa,CAACI,SAAS,CAACI,GAAV,CAAc,GAAd,CAAD,CAAb;AACD,KAJH,EAKGC,KALH,CAKUC,KAAD,IAAWC,OAAO,CAACC,GAAR,CAAYF,KAAZ,CALpB;AAMD;AACF,CAXD;;AAYA,MAAMZ,IAAI,GAAG;AACXe,EAAAA,MAAM,EAAE,KADG;AAEXC,EAAAA,KAAK,EAAE,MAFI;AAGXC,EAAAA,UAAU,EAAE;AACVC,IAAAA,QAAQ,EAAE;AADA;AAHD,CAAb","sourcesContent":["import React, { forwardRef } from \"react\";\nimport \"./VideoCard.css\";\nimport TextTruncate from \"react-text-truncate\";\nimport { ThumbUpSharp } from \"@material-ui/icons\";\nimport YouTube from \"react-youtube\";\nimport movieTrailer from \"movie-trailer\";\n\nconst base_url = \"https://image.tmdb.org/t/p/original/\";\n\nconst VideoCard = forwardRef(({ movie }, ref) => {\n  return (\n    <div ref={ref} className=\"videoCard\">\n      <img\n      \n        src={`${base_url}${movie.backdrop_path || movie.poster_path}`}\n        alt=\"movie poster\"\n      />\n      <h3>\n        {movie.title || movie.original_name} •{\" \"}\n        {movie.release_date || movie.first_air_date}\n      </h3>\n      <TextTruncate\n        line={2}\n        element=\"p\"\n        truncateText=\"...\"\n        text={movie.overview}\n      />\n      <p className=\"videoCard_stats\">\n        {movie.media_type && `${movie.media_type} •`} <ThumbUpSharp />{\" \"}\n        {movie.vote_count}\n      </p>\n      {trailerUrl && <YouTube videoId={trailerUrl} opts={opts} />}\n    </div>\n  );\n});\n\nexport default VideoCard;\n\n\n\n\nconst handleClick = (movie) => {\n  if (trailerUrl) {\n    setTrailerUrl(\"\");\n  } else {\n    movieTrailer(movie?.name || \"\")\n      .then((url) => {\n        const urlParams = new URLSearchParams(URL(url).search);\n        setTrailerUrl(urlParams.get(\"v\"));\n      })\n      .catch((error) => console.log(error));\n  }\n};\nconst opts = {\n  height: \"390\",\n  width: \"100%\",\n  playerVars: {\n    autoplay: 1,\n  },\n};\n\n"]},"metadata":{},"sourceType":"module"}